{
  "stats": {
    "suites": 7,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-26T08:16:30.621Z",
    "end": "2020-03-26T08:16:42.522Z",
    "duration": 11901,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "717e7f50-da64-41b2-af4e-4454edc33316",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "70dfb539-7b35-45b5-b3df-fefc6016fe29",
          "title": "Test people endpoint",
          "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
          "file": "/tests/people.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Test people endpoint \"before all\" hook",
              "timedOut": false,
              "duration": 1409,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "peopleSchema = await api.getPeople('/schema');\npeopleResult = await api.getPeople('/');\npeopleCharacters = peopleResult.results;\nschemaCharacter = peopleSchema.required;",
              "err": {},
              "uuid": "adfe24a6-f184-4f30-9a48-28294436a958",
              "parentUUID": "70dfb539-7b35-45b5-b3df-fefc6016fe29",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "646c6dae-a6b8-4f52-a58c-7c7beedaf049",
              "title": "Validate response structure",
              "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
              "file": "/tests/people.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should have schema for people resource",
                  "fullTitle": "Test people endpoint Validate response structure it should have schema for people resource",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(peopleSchema)\n  .to.be.an('object')\n  .and.haveOwnProperty('required');",
                  "err": {},
                  "uuid": "4d061be9-8eab-440c-b9b1-52504db65d72",
                  "parentUUID": "646c6dae-a6b8-4f52-a58c-7c7beedaf049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it returns an object in response",
                  "fullTitle": "Test people endpoint Validate response structure it returns an object in response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(peopleResult).to.be.an('object');",
                  "err": {},
                  "uuid": "48593cf2-80b0-4bd8-af84-fa897e287df9",
                  "parentUUID": "646c6dae-a6b8-4f52-a58c-7c7beedaf049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response object has all necessary properties",
                  "fullTitle": "Test people endpoint Validate response structure response object has all necessary properties",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(peopleResult).to.have.keys('count', 'next', 'previous', 'results');",
                  "err": {},
                  "uuid": "f5e653d3-a0ae-4e34-978a-a28464427688",
                  "parentUUID": "646c6dae-a6b8-4f52-a58c-7c7beedaf049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it has array of Characters if no filters are defined",
                  "fullTitle": "Test people endpoint Validate response structure it has array of Characters if no filters are defined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(peopleResult.count).to.equal(SPEC.PEOPLE_COUNT);\nexpect(peopleCharacters).to.be.an('array');",
                  "err": {},
                  "uuid": "fffce9c0-4593-4655-8a82-389c4b8b93f4",
                  "parentUUID": "646c6dae-a6b8-4f52-a58c-7c7beedaf049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check that \"count\" property value equals the real count of people objects",
                  "fullTitle": "Test people endpoint Validate response structure check that \"count\" property value equals the real count of people objects",
                  "timedOut": false,
                  "duration": 4911,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let realCount = peopleCharacters.length;\nlet nextPage = peopleResult.next;\nwhile (nextPage) {\n  const nextPageOfPeople = await api.getUrl(nextPage);\n  const { next, results: nextPeopleCharacters } = nextPageOfPeople.data;\n  realCount += nextPeopleCharacters.length;\n  nextPage = next;\n}\nexpect(realCount).to.be.equal(peopleResult.count);",
                  "err": {},
                  "uuid": "ff54adb6-43f4-4e8d-91c2-63a16a44befa",
                  "parentUUID": "646c6dae-a6b8-4f52-a58c-7c7beedaf049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "each Character is an object",
                  "fullTitle": "Test people endpoint Validate response structure each Character is an object",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters.forEach(character => {\n  expect(character).to.be.an('object');\n});",
                  "err": {},
                  "uuid": "ea316122-6abe-4651-943d-2eb3eca86657",
                  "parentUUID": "646c6dae-a6b8-4f52-a58c-7c7beedaf049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "which structure follows the schema",
                  "fullTitle": "Test people endpoint Validate response structure which structure follows the schema",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters.map(character => {\n  const isValidCharacter = validateProperties(schemaCharacter, character);\n  expect(isValidCharacter).to.be.true;\n});",
                  "err": {},
                  "uuid": "7d1d73ee-d8b9-4840-ba5e-419e533966bb",
                  "parentUUID": "646c6dae-a6b8-4f52-a58c-7c7beedaf049",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d061be9-8eab-440c-b9b1-52504db65d72",
                "48593cf2-80b0-4bd8-af84-fa897e287df9",
                "f5e653d3-a0ae-4e34-978a-a28464427688",
                "fffce9c0-4593-4655-8a82-389c4b8b93f4",
                "ff54adb6-43f4-4e8d-91c2-63a16a44befa",
                "ea316122-6abe-4651-943d-2eb3eca86657",
                "7d1d73ee-d8b9-4840-ba5e-419e533966bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4919,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "b08c6db1-ac63-4399-8c32-214fdc38d1e6",
              "title": "Check Character entity",
              "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
              "file": "/tests/people.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it has array of film URLs",
                  "fullTitle": "Test people endpoint Check Character entity it has array of film URLs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters.forEach(({ films }) => {\n  expect(films).to.be.an('array');\n});",
                  "err": {},
                  "uuid": "eb5342d7-6b1d-497c-ab7e-041e37200c7d",
                  "parentUUID": "b08c6db1-ac63-4399-8c32-214fdc38d1e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "which has at least one film URL",
                  "fullTitle": "Test people endpoint Check Character entity which has at least one film URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const isCharacterOfFilm = peopleCharacters.every(\n  ({ films }) => films.length > 0\n);\nexpect(isCharacterOfFilm).to.be.true;",
                  "err": {},
                  "uuid": "654f1e81-0001-48a1-a89f-a379d71ea5be",
                  "parentUUID": "b08c6db1-ac63-4399-8c32-214fdc38d1e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check that a film can be retrieved by URL from the \"films\" array",
                  "fullTitle": "Test people endpoint Check Character entity check that a film can be retrieved by URL from the \"films\" array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters\n  .slice(0, COMMON.REQUEST_THRESHOLD) // threshold is used to limit number of similar requests to the API\n  .forEach(({ films }) => {\n    films.slice(0, COMMON.REQUEST_THRESHOLD).forEach(async filmUrl => {\n      const { data: filmResponse } = await api.getUrl(filmUrl);\n      const { title } = filmResponse;\n      expect(filmResponse.status).to.be.equal(200);\n      expect(filmResponse.statusText).to.be.equal('OK');\n      expect(title).to.not.be.empty;\n    });\n  });",
                  "err": {},
                  "uuid": "fb20e033-2fb2-473c-ab57-c3a744ea5131",
                  "parentUUID": "b08c6db1-ac63-4399-8c32-214fdc38d1e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check that Character is present in all the films listed in its list",
                  "fullTitle": "Test people endpoint Check Character entity check that Character is present in all the films listed in its list",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters\n  .slice(0, COMMON.REQUEST_THRESHOLD) // threshold is used to limit number of similar requests to the API\n  .forEach(({ films, name }) => {\n    films.slice(0, COMMON.REQUEST_THRESHOLD).forEach(async filmUrl => {\n      const filmResponse = await api.getUrl(filmUrl);\n      const { characters } = filmResponse.data;\n      let isFilmCharacter = false;\n      for (const characterUrl of characters) {\n        const characterResponse = await api.getUrl(characterUrl);\n        const { name: expectedName } = characterResponse.data;\n        if (expectedName === name) {\n          isFilmCharacter = true;\n          break;\n        }\n      }\n      expect(isFilmCharacter).to.be.true;\n    });\n  });",
                  "err": {},
                  "uuid": "a8ef2735-51f9-4d75-9972-9fc97038295c",
                  "parentUUID": "b08c6db1-ac63-4399-8c32-214fdc38d1e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb5342d7-6b1d-497c-ab7e-041e37200c7d",
                "654f1e81-0001-48a1-a89f-a379d71ea5be",
                "fb20e033-2fb2-473c-ab57-c3a744ea5131",
                "a8ef2735-51f9-4d75-9972-9fc97038295c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "298ccc81-732f-48a1-b1a6-d53e9bb6dcda",
              "title": "Check people filtration",
              "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
              "file": "/tests/people.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "80c88728-0aea-4756-bb36-9095af558b3b",
                  "title": "by ID",
                  "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
                  "file": "/tests/people.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "a character can be retrieved by its ID",
                      "fullTitle": "Test people endpoint Check people filtration by ID a character can be retrieved by its ID",
                      "timedOut": false,
                      "duration": 1040,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filteredPeople = await api.getPeople(\n  `/${SPEC.FIRST_CHARACTER_ID}`\n);\nexpect(filteredPeople)\n  .to.be.an('object')\n  .that.hasOwnProperty('name');",
                      "err": {},
                      "uuid": "df3cfe8f-0f45-4deb-9e20-a9fc7c1b260a",
                      "parentUUID": "80c88728-0aea-4756-bb36-9095af558b3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "no character is retrieved by out-of-range ID",
                      "fullTitle": "Test people endpoint Check people filtration by ID no character is retrieved by out-of-range ID",
                      "timedOut": false,
                      "duration": 784,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filteredPeople = await api.getPeople(\n  `/${SPEC.FIRST_CHARACTER_ID - 1}`,\n  true\n);\nexpect(filteredPeople.status).to.be.equal(404);",
                      "err": {},
                      "uuid": "e0703ba5-abda-449e-ba07-0bfc95f37b9c",
                      "parentUUID": "80c88728-0aea-4756-bb36-9095af558b3b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "df3cfe8f-0f45-4deb-9e20-a9fc7c1b260a",
                    "e0703ba5-abda-449e-ba07-0bfc95f37b9c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1824,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "fa5121cb-37e0-4ebe-8ead-66f3cb3bef8a",
                  "title": "by search criteria",
                  "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
                  "file": "/tests/people.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "it should retrieve one Character by its exactly matching name",
                      "fullTitle": "Test people endpoint Check people filtration by search criteria it should retrieve one Character by its exactly matching name",
                      "timedOut": false,
                      "duration": 544,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const searchCriteria = 'C-3PO';\nconst searchResult = await api.search(searchCriteria);\nconst { count, results } = searchResult;\nexpect(count).to.be.equal(1);\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(1);\nexpect(results[0]).to.include({ name: 'C-3PO' });",
                      "err": {},
                      "uuid": "4f9bb0bf-c16d-4b7f-b21b-8c3b356f756d",
                      "parentUUID": "fa5121cb-37e0-4ebe-8ead-66f3cb3bef8a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it should retrieve two Characters by partially matching names",
                      "fullTitle": "Test people endpoint Check people filtration by search criteria it should retrieve two Characters by partially matching names",
                      "timedOut": false,
                      "duration": 222,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const searchCriteria = 'Lu';\nconst searchResult = await api.search(searchCriteria);\nconst { count, results } = searchResult;\nexpect(count).to.be.equal(2);\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(2);\nexpect(results[0]).to.include({ name: 'Luke Skywalker' });\nexpect(results[1]).to.include({ name: 'Luminara Unduli' });",
                      "err": {},
                      "uuid": "8a63f788-4d90-4d82-8a2a-5969dd27d422",
                      "parentUUID": "fa5121cb-37e0-4ebe-8ead-66f3cb3bef8a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it should not retrieve any Characters if no match is found",
                      "fullTitle": "Test people endpoint Check people filtration by search criteria it should not retrieve any Characters if no match is found",
                      "timedOut": false,
                      "duration": 558,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const searchCriteria = 'qwerty';\nconst searchResult = await api.search(searchCriteria);\nconst { count, results } = searchResult;\nexpect(count).to.be.equal(0);\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(0);",
                      "err": {},
                      "uuid": "206426a5-d480-45ab-8258-9e499eb39e1c",
                      "parentUUID": "fa5121cb-37e0-4ebe-8ead-66f3cb3bef8a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it should retrieve all Characters if searching criteria is empty",
                      "fullTitle": "Test people endpoint Check people filtration by search criteria it should retrieve all Characters if searching criteria is empty",
                      "timedOut": false,
                      "duration": 716,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const searchCriteria = '';\nconst searchResult = await api.search(searchCriteria);\nconst { count, next, results } = searchResult;\nexpect(count).to.be.equal(SPEC.PEOPLE_COUNT);\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(10);\nexpect(next).to.be.equal('https://swapi.co/api/people/?search=&page=2');",
                      "err": {},
                      "uuid": "de0afb7d-e63f-49c2-b346-872c807f66ca",
                      "parentUUID": "fa5121cb-37e0-4ebe-8ead-66f3cb3bef8a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4f9bb0bf-c16d-4b7f-b21b-8c3b356f756d",
                    "8a63f788-4d90-4d82-8a2a-5969dd27d422",
                    "206426a5-d480-45ab-8258-9e499eb39e1c",
                    "de0afb7d-e63f-49c2-b346-872c807f66ca"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2040,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "681b3225-8f5d-4dd2-853a-adaf4856c9ea",
              "title": "Check pagination",
              "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
              "file": "/tests/people.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it gets the first page if no page id is in the URL",
                  "fullTitle": "Test people endpoint Check pagination it gets the first page if no page id is in the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { next, results } = peopleResult;\nexpect(next).to.be.equal('https://swapi.co/api/people/?page=2');\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(10);",
                  "err": {},
                  "uuid": "114b5501-c0d1-435c-bdfe-3c57adf81e08",
                  "parentUUID": "681b3225-8f5d-4dd2-853a-adaf4856c9ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it gets a certain page if its page ID is provided in the URL",
                  "fullTitle": "Test people endpoint Check pagination it gets a certain page if its page ID is provided in the URL",
                  "timedOut": false,
                  "duration": 652,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const page = '5';\nconst { next, results } = await api.getPage(page);\nexpect(next).to.be.equal('https://swapi.co/api/people/?page=6');\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(10);",
                  "err": {},
                  "uuid": "f5e9d9a2-c9ff-443a-be57-a3ca6ef1f94f",
                  "parentUUID": "681b3225-8f5d-4dd2-853a-adaf4856c9ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redirects to the previous page URL from the last page",
                  "fullTitle": "Test people endpoint Check pagination redirects to the previous page URL from the last page",
                  "timedOut": false,
                  "duration": 1015,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { data: lastPageResult } = await api.getUrl(SPEC.LAST_PAGE_URL);\nconst { previous } = lastPageResult;\nconst { data: previousPageResult } = await api.getUrl(previous);\nconst { next } = previousPageResult;\nexpect(next).to.be.equal(SPEC.LAST_PAGE_URL);",
                  "err": {},
                  "uuid": "7d88e3bd-5be7-48c2-9b90-f3eeb4120bd0",
                  "parentUUID": "681b3225-8f5d-4dd2-853a-adaf4856c9ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "114b5501-c0d1-435c-bdfe-3c57adf81e08",
                "f5e9d9a2-c9ff-443a-be57-a3ca6ef1f94f",
                "7d88e3bd-5be7-48c2-9b90-f3eeb4120bd0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1667,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "html": "true",
        "reportDir": "testReports",
        "reportFilename": "testReport"
      },
      "version": "4.1.0"
    }
  }
}