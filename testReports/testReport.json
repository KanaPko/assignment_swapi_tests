{
  "stats": {
    "suites": 7,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-26T09:23:19.752Z",
    "end": "2020-03-26T09:23:36.290Z",
    "duration": 16538,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0ce11ff2-197e-4664-879e-d05518eeaa18",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6e44da55-41df-4338-b7ac-eb99c47bdb7a",
          "title": "Test people endpoint",
          "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
          "file": "/tests/people.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Test people endpoint \"before all\" hook",
              "timedOut": false,
              "duration": 1574,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "peopleSchema = await api.getPeople('/schema');\npeopleResult = await api.getPeople('/');\npeopleCharacters = peopleResult.results;\nschemaCharacter = peopleSchema.required;",
              "err": {},
              "uuid": "15f59aca-d22e-4aa0-aade-5872964d8b95",
              "parentUUID": "6e44da55-41df-4338-b7ac-eb99c47bdb7a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bca7979a-dc9b-4b8d-bd7d-e31ab070cc93",
              "title": "Validate response structure",
              "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
              "file": "/tests/people.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should have schema for people resource",
                  "fullTitle": "Test people endpoint Validate response structure it should have schema for people resource",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(peopleSchema)\n  .to.be.an('object')\n  .and.haveOwnProperty('required');",
                  "err": {},
                  "uuid": "d3fefcec-f270-4172-8e05-58769d8908e8",
                  "parentUUID": "bca7979a-dc9b-4b8d-bd7d-e31ab070cc93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it returns an object in response",
                  "fullTitle": "Test people endpoint Validate response structure it returns an object in response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(peopleResult).to.be.an('object');",
                  "err": {},
                  "uuid": "3e702d89-aa8f-4eef-90b1-d008547dc463",
                  "parentUUID": "bca7979a-dc9b-4b8d-bd7d-e31ab070cc93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it has all necessary properties",
                  "fullTitle": "Test people endpoint Validate response structure it has all necessary properties",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(peopleResult).to.have.keys('count', 'next', 'previous', 'results');",
                  "err": {},
                  "uuid": "45e79c98-c6e2-4eb5-a0b3-aaa491324d9d",
                  "parentUUID": "bca7979a-dc9b-4b8d-bd7d-e31ab070cc93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it has array of Characters if no filters are defined",
                  "fullTitle": "Test people endpoint Validate response structure it has array of Characters if no filters are defined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(peopleResult.count).to.equal(SPEC.PEOPLE_COUNT);\nexpect(peopleCharacters).to.be.an('array');",
                  "err": {},
                  "uuid": "7c59bbb0-7ccd-49dd-9b6c-ce77b1e6f85b",
                  "parentUUID": "bca7979a-dc9b-4b8d-bd7d-e31ab070cc93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "its \"count\" property value equals to the real count of existing people objects",
                  "fullTitle": "Test people endpoint Validate response structure its \"count\" property value equals to the real count of existing people objects",
                  "timedOut": false,
                  "duration": 9302,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let realCount = peopleCharacters.length;\nlet nextPage = peopleResult.next;\nwhile (nextPage) {\n  const nextPageOfPeople = await api.getUrl(nextPage);\n  const { next, results: nextPeopleCharacters } = nextPageOfPeople.data;\n  realCount += nextPeopleCharacters.length;\n  nextPage = next;\n}\nexpect(realCount).to.be.equal(peopleResult.count);",
                  "err": {},
                  "uuid": "d4dbfdef-8d33-48b0-8181-bb748b8dab96",
                  "parentUUID": "bca7979a-dc9b-4b8d-bd7d-e31ab070cc93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "each Character is an object",
                  "fullTitle": "Test people endpoint Validate response structure each Character is an object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters.forEach(character => {\n  expect(character).to.be.an('object');\n});",
                  "err": {},
                  "uuid": "cdf0ae3a-dde3-4200-97a3-206495189333",
                  "parentUUID": "bca7979a-dc9b-4b8d-bd7d-e31ab070cc93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "its structure follows the schema",
                  "fullTitle": "Test people endpoint Validate response structure its structure follows the schema",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters.map(character => {\n  const isValidCharacter = validateProperties(schemaCharacter, character);\n  expect(isValidCharacter).to.be.true;\n});",
                  "err": {},
                  "uuid": "9d73bedc-214d-4e4d-96f9-a0cb7f48f9c0",
                  "parentUUID": "bca7979a-dc9b-4b8d-bd7d-e31ab070cc93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3fefcec-f270-4172-8e05-58769d8908e8",
                "3e702d89-aa8f-4eef-90b1-d008547dc463",
                "45e79c98-c6e2-4eb5-a0b3-aaa491324d9d",
                "7c59bbb0-7ccd-49dd-9b6c-ce77b1e6f85b",
                "d4dbfdef-8d33-48b0-8181-bb748b8dab96",
                "cdf0ae3a-dde3-4200-97a3-206495189333",
                "9d73bedc-214d-4e4d-96f9-a0cb7f48f9c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9308,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "cc3de4b9-e845-4b3b-bb98-2c650f6e9a34",
              "title": "Check Character entity",
              "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
              "file": "/tests/people.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it has array of film URLs",
                  "fullTitle": "Test people endpoint Check Character entity it has array of film URLs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters.forEach(({ films }) => {\n  expect(films).to.be.an('array');\n});",
                  "err": {},
                  "uuid": "2fbb673b-472b-41e5-a71d-53217ff55228",
                  "parentUUID": "cc3de4b9-e845-4b3b-bb98-2c650f6e9a34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it has at least one film URL",
                  "fullTitle": "Test people endpoint Check Character entity it has at least one film URL",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const isCharacterOfFilm = peopleCharacters.every(\n  ({ films }) => films.length > 0\n);\nexpect(isCharacterOfFilm).to.be.true;",
                  "err": {},
                  "uuid": "a6148781-dea4-45d3-9ea8-993ab4377cb0",
                  "parentUUID": "cc3de4b9-e845-4b3b-bb98-2c650f6e9a34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it retrieves a film object by URL from the \"films\" array",
                  "fullTitle": "Test people endpoint Check Character entity it retrieves a film object by URL from the \"films\" array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters\n  .slice(0, COMMON.REQUEST_THRESHOLD) // threshold is used to limit number of similar requests to the API\n  .forEach(({ films }) => {\n    films.slice(0, COMMON.REQUEST_THRESHOLD).forEach(async filmUrl => {\n      const filmResponse = await api.getUrl(filmUrl);\n      const { title } = filmResponse.data;\n      expect(filmResponse.status).to.be.equal(200);\n      expect(filmResponse.statusText).to.be.equal('OK');\n      expect(title).to.not.be.empty;\n    });\n  });",
                  "err": {},
                  "uuid": "25923399-a921-4069-a6c2-cc2e8ef82bd4",
                  "parentUUID": "cc3de4b9-e845-4b3b-bb98-2c650f6e9a34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "there is the Character in all the films which are listed in its \"films\" list",
                  "fullTitle": "Test people endpoint Check Character entity there is the Character in all the films which are listed in its \"films\" list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "peopleCharacters\n  .slice(0, COMMON.REQUEST_THRESHOLD) // threshold is used to limit number of similar requests to the API\n  .forEach(({ films, name }) => {\n    films.slice(0, COMMON.REQUEST_THRESHOLD).forEach(async filmUrl => {\n      const filmResponse = await api.getUrl(filmUrl);\n      const { characters } = filmResponse.data;\n      let isFilmCharacter = false;\n      for (const characterUrl of characters) {\n        const characterResponse = await api.getUrl(characterUrl);\n        const { name: expectedName } = characterResponse.data;\n        if (expectedName === name) {\n          isFilmCharacter = true;\n          break;\n        }\n      }\n      expect(isFilmCharacter).to.be.true;\n    });\n  });",
                  "err": {},
                  "uuid": "503454cb-3884-4d67-b931-25ebd7bc4c18",
                  "parentUUID": "cc3de4b9-e845-4b3b-bb98-2c650f6e9a34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fbb673b-472b-41e5-a71d-53217ff55228",
                "a6148781-dea4-45d3-9ea8-993ab4377cb0",
                "25923399-a921-4069-a6c2-cc2e8ef82bd4",
                "503454cb-3884-4d67-b931-25ebd7bc4c18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "e4f1698e-7e14-40c7-817c-a101f745b0a3",
              "title": "Check people filtration",
              "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
              "file": "/tests/people.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "392697f5-6003-403c-abcd-1b6c48535911",
                  "title": "by ID",
                  "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
                  "file": "/tests/people.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "it retrieves a character by its ID",
                      "fullTitle": "Test people endpoint Check people filtration by ID it retrieves a character by its ID",
                      "timedOut": false,
                      "duration": 924,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filteredPeople = await api.getPeople(\n  `/${SPEC.FIRST_CHARACTER_ID}`\n);\nexpect(filteredPeople)\n  .to.be.an('object')\n  .that.includes({ name: 'Luke Skywalker' });",
                      "err": {},
                      "uuid": "1498a81c-9b52-453f-b1da-a26bda163604",
                      "parentUUID": "392697f5-6003-403c-abcd-1b6c48535911",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it retrieves no character by out-of-range ID",
                      "fullTitle": "Test people endpoint Check people filtration by ID it retrieves no character by out-of-range ID",
                      "timedOut": false,
                      "duration": 713,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const filteredPeople = await api.getPeople(\n  `/${SPEC.FIRST_CHARACTER_ID - 1}`\n);\nexpect(filteredPeople.status).to.be.equal(404);",
                      "err": {},
                      "uuid": "cb5ae620-cf7d-4253-b1bf-1cad7a95e227",
                      "parentUUID": "392697f5-6003-403c-abcd-1b6c48535911",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1498a81c-9b52-453f-b1da-a26bda163604",
                    "cb5ae620-cf7d-4253-b1bf-1cad7a95e227"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1637,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "7a46084d-be31-4cc4-8201-9ae3801f0253",
                  "title": "by search criteria",
                  "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
                  "file": "/tests/people.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "it should retrieve one Character by its exactly matching name",
                      "fullTitle": "Test people endpoint Check people filtration by search criteria it should retrieve one Character by its exactly matching name",
                      "timedOut": false,
                      "duration": 219,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const SEARCH_CRITERIA = 'C-3PO';\nconst searchResult = await api.search(SEARCH_CRITERIA);\nconst { count, results } = searchResult;\nexpect(count).to.be.equal(1);\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(1);\nexpect(results[0]).to.include({ name: 'C-3PO' });",
                      "err": {},
                      "uuid": "13fdc206-5832-4db0-8916-315660cb4c15",
                      "parentUUID": "7a46084d-be31-4cc4-8201-9ae3801f0253",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it should retrieve two Characters by partially matching names",
                      "fullTitle": "Test people endpoint Check people filtration by search criteria it should retrieve two Characters by partially matching names",
                      "timedOut": false,
                      "duration": 677,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const SEARCH_CRITERIA = 'Lu';\nconst searchResult = await api.search(SEARCH_CRITERIA);\nconst { count, results } = searchResult;\nexpect(count).to.be.equal(2);\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(2);\nexpect(results[0]).to.include({ name: 'Luke Skywalker' });\nexpect(results[1]).to.include({ name: 'Luminara Unduli' });",
                      "err": {},
                      "uuid": "6f5c02e2-efc8-4dc0-b199-6d4ca6122764",
                      "parentUUID": "7a46084d-be31-4cc4-8201-9ae3801f0253",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it should not retrieve any Characters if no match is found",
                      "fullTitle": "Test people endpoint Check people filtration by search criteria it should not retrieve any Characters if no match is found",
                      "timedOut": false,
                      "duration": 717,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const SEARCH_CRITERIA = 'qwerty';\nconst searchResult = await api.search(SEARCH_CRITERIA);\nconst { count, results } = searchResult;\nexpect(count).to.be.equal(0);\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(0);",
                      "err": {},
                      "uuid": "575bb66d-ffd2-4850-8358-1bae7908cb63",
                      "parentUUID": "7a46084d-be31-4cc4-8201-9ae3801f0253",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "it should retrieve all Characters if searching criteria is empty",
                      "fullTitle": "Test people endpoint Check people filtration by search criteria it should retrieve all Characters if searching criteria is empty",
                      "timedOut": false,
                      "duration": 655,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const SEARCH_CRITERIA = '';\nconst searchResult = await api.search(SEARCH_CRITERIA);\nconst { count, next, results } = searchResult;\nexpect(count).to.be.equal(SPEC.PEOPLE_COUNT);\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(10);\nexpect(next).to.be.equal('https://swapi.co/api/people/?search=&page=2');",
                      "err": {},
                      "uuid": "5c6479c0-3c81-43e2-abcc-d2babd1f7110",
                      "parentUUID": "7a46084d-be31-4cc4-8201-9ae3801f0253",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "13fdc206-5832-4db0-8916-315660cb4c15",
                    "6f5c02e2-efc8-4dc0-b199-6d4ca6122764",
                    "575bb66d-ffd2-4850-8358-1bae7908cb63",
                    "5c6479c0-3c81-43e2-abcc-d2babd1f7110"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2268,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "b6b9155f-1604-4ae6-9dea-49b326371c98",
              "title": "Check pagination",
              "fullFile": "/Users/oleksandrmazur/kate/projects/js/assignment_swapi_tests/tests/people.js",
              "file": "/tests/people.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it gets the first page if no page id is in the URL",
                  "fullTitle": "Test people endpoint Check pagination it gets the first page if no page id is in the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { next, results } = peopleResult;\nexpect(next).to.be.equal('https://swapi.co/api/people/?page=2');\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(10);",
                  "err": {},
                  "uuid": "10620d5b-a54f-4870-b0d6-b3b1d22b1a9a",
                  "parentUUID": "b6b9155f-1604-4ae6-9dea-49b326371c98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it gets a certain page if its page ID is provided in the URL",
                  "fullTitle": "Test people endpoint Check pagination it gets a certain page if its page ID is provided in the URL",
                  "timedOut": false,
                  "duration": 659,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PAGE = '5';\nconst { next, results } = await api.getPage(PAGE);\nexpect(next).to.be.equal('https://swapi.co/api/people/?page=6');\nexpect(results)\n  .to.be.an('array')\n  .that.have.length(10);",
                  "err": {},
                  "uuid": "1fdffab7-e173-4bd2-9205-2c881169e8f7",
                  "parentUUID": "b6b9155f-1604-4ae6-9dea-49b326371c98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it redirects to the previous page URL from the last page",
                  "fullTitle": "Test people endpoint Check pagination it redirects to the previous page URL from the last page",
                  "timedOut": false,
                  "duration": 1033,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { data: lastPageResult } = await api.getUrl(SPEC.LAST_PAGE_URL);\nconst { previous } = lastPageResult;\nexpect(previous).to.not.be.empty;\nconst { data: previousPageResult } = await api.getUrl(previous);\nconst { next } = previousPageResult;\nexpect(next).to.be.equal(SPEC.LAST_PAGE_URL);",
                  "err": {},
                  "uuid": "823b7424-1bdf-45e4-b923-ae864deb7307",
                  "parentUUID": "b6b9155f-1604-4ae6-9dea-49b326371c98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10620d5b-a54f-4870-b0d6-b3b1d22b1a9a",
                "1fdffab7-e173-4bd2-9205-2c881169e8f7",
                "823b7424-1bdf-45e4-b923-ae864deb7307"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1692,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "html": "true",
        "reportDir": "testReports",
        "reportFilename": "testReport"
      },
      "version": "4.1.0"
    }
  }
}